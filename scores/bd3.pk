# Test file for the pKernel system
# First the name:
Happy Birthday
# Then the key:
0
# Then the start tempo:
30
# Then the beat (in this case, quarter note)
4
# Then some harmonic information:
harm
1 0 I
endharm

# Then the threads themselves

thread
Harmony thread
harm
virtual
2 0 I .
endharm
harm
virtual
4 0 I .
endharm
harm
virtual
2 0 I .
endharm
harm
virtual
4 0 I .
endharm
harm
2 2 V . -
endharm
harm
4 2 V . -
endharm
harm
2 0 V . -
endharm
harm
4 0 V . -
endharm
harm
virtual
2 0 I .
endharm
harm
virtual
4 0 I .
endharm
harm
virtual
2 1 I .
endharm
harm
virtual
4 1 I .
endharm
harm
virtual
2 0 IV .
endharm
harm
virtual
4 0 IV .
endharm
harm
virtual
2 2 I .
endharm
harm
4 0 V .
endharm
script play
.start
	importHarm 0 h0
	newFloat f2 2
	getTimeSlice f3
	.loop
		copyFloat f4 f3
		# clear any junk in there
		destroyHarm h1
		.innerloop
			addHarm h0 h1
			getDuration h0 f5
			sub f4 f5
			cmpDirect f4 0.0
			#dumpFloats
			ble next
			getNextHarm h0 h0
		jmp innerloop
		.next
		#dumpFloats
		# drop out of the loop
		setTotalBeats f3
	jmp loop
jmp start
endscript
endthread
thread
Alto
script play
.start
importHarm 0 h0
newFloat f2 2.0
.loop
getChordNotes h0 n0
getDuration h0 f1
getInversion h0 f3
inc f3
getNote n0 f3 n1
bne ok
newFloat f3 0.0
getNote n0 f3 n1
.ok
setNoteDuration n1 f1
setNoteOctave n1 f2
outNote n1
getNextHarm h0 h0
bne loop
jmp start
endscript
endthread
thread
Arpeggiate
script play
# This should arpeggiate the chords a little
.start
	importHarm 0 h0
	newFloat f254 0.0833333333333333333333333333
	newFloat f253 50.00
	newFloat f252 0.00
	.loop
		newFloat f2 2.0
		getChordNotes h0 n0
		getDuration h0 f1
		getInversion h0 f3
		newFloat f4 0.0
		.nextnote
			getNote n0 f3 n1
			bne ok
			newFloat f3 0.0
			getNote n0 f3 n1
			.ok
			getNotePitchClass n1 f5
			cmp f4 f5
			blt ok2
			inc f2
			.ok2	
			copyFloat f4 f5
			setNoteDuration n1 f254
			setNoteOctave n1 f2
			setNoteBaggage n1 f252 f253
			outNoteKey n1
			sub f1 f254
			cmpDirect f1 0.0
			beq next
			inc f3
		jmp nextnote
		.next	
		getNextHarm h0 h0
	bne loop
jmp start
#-------------------------------------------
endscript
endthread
thread
The Tune
note
2 0 12
note
4 3 d5
note
4 3 d6
note
4 3 d5
note
4 4 d1
note
4 3 d7
note
4 0 12
note
4 3 d5
note
4 3 d6
note
4 3 d5
note
4 4 d2
note
4 4 d1
note
4 0 12
note
4 3 d5
note
4 4 d5
note
4 4 d3
note
4 4 d1
note
4 3 d7 2-
note
4 3 d6
note
4 4 d4
note
4 4 d3
note
4 4 d1
note
4 4 d2
script play
.start
importNote 3 n0
#major key scale reference
newFloat f10 0.0
#minor key scale reference
newFloat f11 2.0
newFloat f252 0.00
newFloat f253 70.00
newFloat f251 1.00
.loop
	getInput f70 f32
	modDirect f70 2.0
	cmpDirect f70 1.0
	beq fancy
	setNoteBaggage n0 f252 f253
	outNoteKey n0
	getNextNote n0 n0
	bne loop
	jmp done
	.fancy
	getNoteDuration n0 f0
	getNotePitchClass n0 f1
	getNoteOctave n0 f2
	getNoteOctave n0 f3
	getNoteOctave n0 f4
	divDirect f0 4
	newNote n1
	newNote n2
	newNote n3
	newNote n4
	# setup first note
	setNoteDuration n1 f0
	setNotePitchClass n1 f1
	setNoteOctave n1 f2
	dec f2
	# set up second note
	cmpDirect f1 12.0
	beq rest
	setNoteDuration n2 f0
	borrowHarm 0 h1 h0
	getTotalBeats f5
	getHarmOffset h0 f5 h1
	getChordNotes h1 n6
	nearestNote n6 n1 n7
	#getNoteInChord n6 f251 n7
	getNotePitchClass n7 f8
	setNotePitchClass n2 f8
	setNoteOctave n2 f3
	jmp third
	.rest
	setNoteDuration n2 f0
	setNotePitchClass n2 f1
	setNoteOctave n2 f2
	# set up third note
	.third
	setNoteDuration n3 f0
	setNotePitchClass n3 f1
	setNoteOctave n3 f3
	transposeDirect n3 -1.0
	# set up fourth note
	setNoteDuration n4 f0
	setNotePitchClass n4 f1
	setNoteOctave n4 f4
	setNoteBaggage n1 f252 f253
	outNoteKey n1
	setNoteBaggage n2 f252 f253
	outNoteKey n2
	setNoteBaggage n3 f252 f253
	outNoteKey n3
	setNoteBaggage n4 f252 f253
	outNoteKey n4
	getNextNote n0 n0
bne loop
.done
getCurrentScale f12
cmpDirect f12 0.0
bne major
.minor
setCurrentScale f11
jmp start
.major
setCurrentScale f10
jmp start
endscript
endthread
# Up to 16 threads are allowed
#active 0
#active 1
active 2
active 3
